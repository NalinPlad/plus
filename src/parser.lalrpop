use std::str::FromStr;

grammar;

pub Expr:f32 = {
    <e:Expr> "+" <f:Factor> => e+f,
    <e:Expr> "-" <f:Factor> => e-f,
    <Factor>
};

Factor:f32 = {
    <f:Factor> "^" <t:Term> => f.powf(t),  //Revise to one line
    <f:Factor> "**" <t:Term> => f.powf(t), //Revise
    <f:Factor> "*" <t:Term> => f*t,
    <f:Factor> "/" <t:Term> => f/t,
    <Term>
};

Term: f32 = {
    Num,
    "(" <Expr> ")",
};

Num: f32 = <s:r"[0-9]+\.?[0-9]*"> => f32::from_str(s).unwrap();

Symbol:String = <s:r"[_a-zA-Z][_a-zA-Z0-9]*"> => s.to_owned();

